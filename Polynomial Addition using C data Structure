
#include<stdio.h>
#include<conio.h>
#include<process.h>
#include<malloc.h>
#include<stdlib.h>

/*
	The structure for the polynomial
	This is a linked list with two variable
	int coeff The Coefficient
	int pow The power of x
*/

typedef struct node
{
	int coeff;
	int pow;
	struct link * next;
}poly;

/*
	The prototypes
*/
void create_poly(poly **);
void show_poly(poly *);
void add_poly(poly **, poly *, poly *);

/*
	The simple menu driven main function
*/
void main()
{
	char ch;
	do
	{
		poly *poly1, *poly2, *poly3;
		clrscr();
		printf("***** ADDITION OF TWO POLYNOMIALS *****\n\n\n");
		printf("\nCreate 1st expression: \n\n");
		create_poly(&poly1);
		clrscr();
		printf("\nStored the 1st expression\n\n");
		show_poly(poly1);
		getch();
		clrscr();
		printf("***** ADDITION OF TWO POLYNOMIALS *****\n\n\n");
		printf("\nCreate 2nd expression\n\n");
		create_poly(&poly2);
		clrscr();
		printf("\nStored the 2nd expression\n\n");
		show_poly(poly2);
		getch();
		clrscr();
		printf("***** ADDITION OF TWO POLYNOMIALS *****\n\n\n");
		add_poly(&poly3, poly1, poly2);
		show_poly(poly3);
		printf("\n\nAdd two more expressions?(Y/N): ");
		fflush(stdin);
		scanf("%c", &ch);
	}while(ch=='Y'||ch=='y');
}

/*
	The create polynomial function
	poly ** node The pointer to the head of the polynomial
	We will modify the parameter and will store the base address
	return void
*/

void create_poly(poly **node)
{
	char flag; //A flag to control the menu
	int coeff, pow;
	poly *tmp_node; //To hold the temporary last address
	tmp_node = (struct poly *)malloc(sizeof(poly)); //create the first node
	*node = tmp_node; //Store the head address to the reference variable
	do
	{
		//Get the user data
		printf("\nEnter Coeff:");
		scanf("%d", &coeff);
		tmp_node->coeff = coeff;
		printf("\nEnter Pow:");
		scanf("%d", &pow);
		tmp_node->pow = pow;
		//Done storing user data

		//Now increase the Linked on user condition
		tmp_node->next = NULL;

		//Ask user for continuation
		printf("\nContinue?(Y/N): ");
		fflush(stdin);
		scanf("%c", &flag);
		//printf("\nFLAG: %c\n", flag);
		//Grow the linked list on condition
		if(flag=='Y'||flag=='y')
		{
			//Grow the list
			tmp_node->next=(struct poly *) malloc(sizeof(poly));
			tmp_node = tmp_node->next;
			tmp_node->next = NULL;
		}
	}while(flag=='Y'||flag=='y');
}

/*
	The show polynomial function
	Prints the Polynomial in user readable format
	poly * node The polynomial linked list
	return void
*/

void show_poly(poly * node)
{
	printf("\nThe polynomial expression is: ");
	while(node != NULL)
	{
		printf("%dx^%d",node->coeff, node->pow);
		node=node->next;
		if(node!=NULL)
			printf(" + ");
	}
}

/*
	The polynomial add function
	Adds two polynomial to a given variable
	poly ** result Stores the result
	poly * poly1 The first polynomial expression
	poly * poly2 The second polynomial expression
	return void
*/

void add_poly(poly **result, poly *poly1, poly * poly2)
{
	poly *tmp_node; //Temporary storage for the linked list
	printf("Performing Polynomial ADDITION\n\n");
	tmp_node = (poly *) malloc(sizeof(poly));
	tmp_node->next = NULL;
	//Copy the head address to the result linked list
	*result = tmp_node;

	//Loop while both of the linked lists have value
	while(poly1 && poly2)
	{
		if (poly1->pow > poly2->pow)
		{
			tmp_node->pow = poly1->pow;
			tmp_node->coeff = poly1->coeff;
			poly1 = poly1->next;
		}
		else if (poly1->pow < poly2->pow)
		{
			tmp_node->pow = poly2->pow;
			tmp_node->coeff = poly2->coeff;
			poly2 = poly2->next;
		}
		else
		{
			tmp_node->pow = poly1->pow;
			tmp_node->coeff = poly1->coeff + poly2->coeff;
			poly1 = poly1->next;
			poly2 = poly2->next;
		}

		//Grow the linked list on condition
		if(poly1 && poly2)
		{
			tmp_node->next = (poly *) malloc(sizeof(poly));
			tmp_node = tmp_node->next;
			tmp_node->next = NULL;
		}
	}

	//Loop while either of the linked lists has value
	while(poly1 || poly2)
	{
		//We have to create the list at beginning
		//As the last while loop will not create any unnecessary node
		tmp_node->next = (poly *) malloc(sizeof(poly));
		tmp_node = tmp_node->next;
		tmp_node->next = NULL;

		if(poly1)
		{
			tmp_node->pow = poly1->pow;
			tmp_node->coeff = poly1->coeff;
			poly1 = poly1->next;
		}
		if(poly2)
		{
			tmp_node->pow = poly2->pow;
			tmp_node->coeff = poly2->coeff;
			poly2 = poly2->next;
		}
	}
	printf("\nAddition Complete... \n\n");
}
